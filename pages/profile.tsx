import type { NextPage } from "next";
import Head from "next/head";
import cupstyles from "../styles/Cups.module.css";
import React, { useState, useEffect, useContext } from "react";
import update from "immutability-helper";
import {
  doc,
  updateDoc,
  collection,
  getDocs,
  QueryDocumentSnapshot,
  DocumentData,
  query,
  where,
} from "firebase/firestore";
import styles from "../styles/Profile.module.css";
import { makeStyles } from "@material-ui/core/styles";
import { db } from "../config/firebase.config";
import Router from "next/router";
import { UserContext } from "../context/UserProvider";
import Avatar from "@mui/material/Avatar";
import Grid from "@mui/material/Grid";
import Button from "@mui/material/Button";
import FormControl from "@mui/material/FormControl";
import InputBase from "@mui/material/InputBase";
import EditIcon from "@mui/icons-material/Edit";
import {
  getDownloadURL,
  getStorage,
  ref,
  StorageReference,
  uploadBytes,
} from "firebase/storage";

import moment from "moment";
import { Checkbox, CircularProgress, FormControlLabel } from "@mui/material";

const Profile: NextPage = () => {
  const user = useContext(UserContext);

  const useStyles = makeStyles((theme) => ({
    textField: {
      "&": {
        marginTop: "9px",
      },
      "& .MuiInputBase-input": {
        borderRadius: 25,
        fontFamily: "Space Mono",
        fontSize: 20,
        color: "#ffffff",
        backgroundColor: "rgba(47, 56, 105, 0.6)",
        width: 500,
        padding: "15px 15px",
      },
      "&:focus": {
        borderRadius: 25,
      },
    },
  }));
  const classes = useStyles();
  const [cups, setCups] = useState<QueryDocumentSnapshot<DocumentData>[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [editMode, setEditMode] = useState<boolean>(false);
  const [tempImage, setTempImage] = React.useState(user.imageURL);
  const [fname, setFname] = React.useState(user.firstName);
  const [lname, setLname] = React.useState(user.lastName);
  const [email, setEmail] = React.useState(user.email);
  const [birthday, setBirthday] = React.useState(user.birthday);
  const [coins, setCoins] = useState<any>(user.newsPreferences);
  const cupsRef = collection(db, "cups");
  const editForm = () => {
    setEditMode(true);
  };
  const editCancel = () => {
    setEditMode(false);
  };

  const editConfirm = async () => {
    const userDocRef = doc(db, "users", user.uid);
    updateDoc(userDocRef, {
      email: email,
      firstName: fname,
      lastName: lname,
      imageURL: tempImage,
      newsPreferences: coins,
    });
    setEditMode(false);
  };
  const changeFName = (event: {
    target: { value: React.SetStateAction<string> };
  }) => {
    setFname(event.target.value);
  };
  const changeLName = (event: {
    target: { value: React.SetStateAction<string> };
  }) => {
    setLname(event.target.value);
  };
  const changeEmail = (event: {
    target: { value: React.SetStateAction<string> };
  }) => {
    setEmail(event.target.value);
  };
  const getCups = async () => {
    const data = await getDocs(cupsRef);
    const result: QueryDocumentSnapshot<DocumentData>[] = [];
    data.forEach((c) => {
      result.push(c);
    });
    // setCups(data.docs.map((item)=>{
    //     return {...item.data(),id:item.id}
    // }));

    setCups(result);
    // setLoading(false);
  };

  useEffect(() => {
    getCups();
    setTimeout(() => {
      setLoading(false);
    }, 1000);
  }, []);
  const handleRedirect = (route: string) => {
    Router.push(`cups/${route}`);
  };
  return (
    <div className={styles.container}>
      <Head>
        <title>Profile</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        {editMode ? (
          <div>
            <Grid container>
              <Grid item xs>
                <h1 className={styles.title}>Profile</h1>
              </Grid>
              <Grid item xs className={styles.edit}>
                <Button
                  onClick={editCancel}
                  style={{
                    background: "#1C273099",
                    fontFamily: "Space Mono",
                    fontSize: 20,
                    borderRadius: 60,
                    fontWeight: 700,
                    height: 55,
                    padding: 10,
                    width: "100%",
                    color: "white",
                  }}
                >
                  Cancel
                </Button>
              </Grid>
              <Grid item xs className={styles.edit}>
                <Button
                  onClick={editConfirm}
                  style={{
                    background: "#2F386999",
                    fontFamily: "Space Mono",
                    fontSize: 20,
                    borderRadius: 60,
                    fontWeight: 700,
                    height: 55,
                    padding: 10,
                    width: "100%",
                    color: "white",
                  }}
                >
                  Confirm
                </Button>
              </Grid>
            </Grid>
            <div>
              <FormControl className={styles.info}>
                <div>
                  <Avatar
                    sx={{ width: 200, height: 200 }}
                    src={tempImage}
                    alt={user.uid}
                  />
                  <input
                    type="file"
                    accept="image/*"
                    onChange={async (e) => {
                      const storage = getStorage();
                      if (e.target.files) {
                        const storageRef = ref(
                          storage,
                          "images/" + e.target.files[0].name
                        );
                        uploadBytes(storageRef, e.target.files[0]).then(
                          (snapshot) => {
                            getDownloadURL(snapshot.ref).then((downloadURL) => {
                              setTempImage(downloadURL);
                            });
                          }
                        );
                      }
                    }}
                    id="imageUpload"
                  />
                </div>
              </FormControl>
            </div>
            <div>
              <FormControl className={styles.title}>
                <h4>First Name</h4>
                <InputBase
                  className={classes.textField}
                  onChange={changeFName}
                  value={fname}
                  type="string"
                />
              </FormControl>
            </div>
            <div>
              <FormControl className={styles.title}>
                <h4>Last Name</h4>
                <InputBase
                  className={classes.textField}
                  onChange={changeLName}
                  value={lname}
                  type="string"
                />
              </FormControl>
            </div>
            <div>
              <FormControl className={styles.title}>
                <h4>Email</h4>
                <InputBase
                  className={classes.textField}
                  onChange={changeEmail}
                  value={email}
                  type="email"
                />
              </FormControl>
            </div>
            <h6 className={styles.title}>{user.uid}</h6>
            <h4 className={styles.title}>Birthday</h4>
            {birthday && (
              <h6 className={styles.subtitle}>
                {moment(birthday).format("M/D/YYYY")}
              </h6>
            )}

            <div>
              <FormControl className={styles.title}>
                <h4>News Preferences</h4>
                <p>Select all that apply.</p>
                <div>
                  {coins.map((tag: any, i: any) => (
                    <div key={i}>
                      <FormControlLabel
                        label={tag.coin + "(" + tag.code + ")"}
                        labelPlacement="end"
                        control={
                          <Checkbox
                            checked={tag.check}
                            color="secondary"
                            onChange={(e) => {
                              const temp: any = update(coins, {
                                [i]: { check: { $set: !coins[i].check } },
                              });
                              setCoins(temp);
                            }}
                          />
                        }
                      />
                    </div>
                  ))}
                </div>
              </FormControl>
            </div>
          </div>
        ) : (
          <div>
            <Grid container>
              <Grid item xs>
                <h1 className={styles.title}>Profile</h1>
              </Grid>
              <Grid item xs className={styles.edit}>
                <Button onClick={editForm}>
                  <EditIcon color="secondary" fontSize="large" />
                </Button>
              </Grid>
            </Grid>
            <h1 className={styles.info}>
              <Avatar
                sx={{ width: 200, height: 200 }}
                src={user.imageURL}
                alt={user.uid}
              />
            </h1>
            <h2 className={styles.info}>
              {user.firstName + " " + user.lastName}
            </h2>
            <h6 className={styles.subtitle}>{user.uid}</h6>

            <h4 className={styles.title}>Email</h4>
            <h6 className={styles.subtitle}>{user.email}</h6>

            <h4 className={styles.info}>Birthday</h4>
            {birthday && (
              <h6 className={styles.subtitle}>
                {moment(birthday).format("M/D/YYYY")}
              </h6>
            )}

            <h4 className={styles.info}>News Preferences</h4>
            <h6 className={styles.subtitle}>
              {user.newsPreferences.map(
                (tag: any) =>
                  tag.check && (
                    <h6 className={styles.subtitle}>
                      * {tag.coin} ({tag.code})
                    </h6>
                  )
              )}
            </h6>

            <h2 className={styles.info}>Cup History</h2>
            <h6 className={styles.info}>
              {loading ? (
                <div className={styles.info}>
                  <CircularProgress />
                </div>
              ) : (
                <Grid container>
                  {cups.map((c, i) => (
                    <div key={i}>
                      <Grid item xs={4}>
                        <Button onClick={(e) => handleRedirect(c.id)}>
                          <div
                            style={{ textAlign: "left", textTransform: "none" }}
                          >
                            <img
                              className={cupstyles.placeholder}
                              src={c.get("imageURL")}
                            ></img>
                            <h5 className={cupstyles.name}>{c.get("name")}</h5>
                            <div className={cupstyles.cuptype}>
                              {c.get("cupType")}
                            </div>
                            <p>
                              {moment(c.get("startDate").toDate()).format(
                                "M/D/YYYY"
                              )}
                              &nbsp;-&nbsp;
                              {moment(c.get("endDate").toDate()).format(
                                "M/D/YYYY"
                              )}
                            </p>
                          </div>
                        </Button>
                      </Grid>
                    </div>
                  ))}
                </Grid>
              )}
            </h6>
          </div>
        )}
      </main>
    </div>
  );
};

export default Profile;
